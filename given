/* 
Class Project: The logical conclusion (v1.1)
CSCI-2500 Fall 2021
*/

/******************************************************************************/
/* Usual suspects to include  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// define BIT type as a char (i.e., one byte)
typedef char BIT;
#define TRUE 1
#define FALSE 0
#define UNDEF -1

// useful constants
BIT ONE[32] = {TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};
BIT ZERO[32] = {FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};
BIT REG_THIRTY_ONE[5] = {TRUE, TRUE, TRUE, TRUE, TRUE};
BIT THIRTY_TWO[32] = {FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, 
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};


/******************************************************************************/
/* Function prototypes */
/******************************************************************************/
BIT not_gate(BIT A);
BIT or_gate(BIT A, BIT B);
BIT or_gate3(BIT A, BIT B, BIT C);
BIT and_gate(BIT A, BIT B);
BIT and_gate3(BIT A, BIT B, BIT C);
BIT xor_gate(BIT A, BIT B);
BIT nor_gate(BIT A, BIT B);
BIT nand_gate(BIT A, BIT B);

void decoder2(BIT I0, BIT I1, BIT* O0, BIT* O1, BIT* O2, BIT* O3);
BIT multiplexor2(BIT S, BIT I0, BIT I1);
void multiplexor2_32(BIT S, BIT* I0, BIT* I1, BIT* Output);
BIT multiplexor4(BIT S0, BIT S1, BIT I0, BIT I1, BIT I2, BIT I3);

void copy_bits(BIT* A, BIT* B);
void print_binary(BIT* A);
void convert_to_binary(int a, BIT* A, int length);
void convert_to_binary_char(int a, char* A, int length);
int binary_to_integer(BIT* A);

int get_instructions(BIT Instructions[][32]);

void Instruction_Memory(BIT* ReadAddress, BIT* Instruction);
void Control(BIT* OpCode,
  BIT* RegDst, BIT* Jump, BIT* Branch, BIT* MemRead, BIT* MemToReg,
  BIT* ALUOp, BIT* MemWrite, BIT* ALUSrc, BIT* RegWrite);
void Read_Register(BIT* ReadRegister1, BIT* ReadRegister2,
  BIT* ReadData1, BIT* ReadData2);
void Write_Register(BIT RegWrite, BIT* WriteRegister, BIT* WriteData);
void ALU_Control(BIT* ALUOp, BIT* funct, BIT* ALUControl);
void ALU(BIT* ALUControl, BIT* Input1, BIT* Input2, BIT* Zero, BIT* Result);
void Data_Memory(BIT MemWrite, BIT MemRead, 
  BIT* Address, BIT* WriteData, BIT* ReadData);
void Extend_Sign16(BIT* Input, BIT* Output);
void updateState();
  
/******************************************************************************/
/* Functions provided for your convenience */
/******************************************************************************/
BIT not_gate(BIT A)
{
  if (A)
    return FALSE;
  else
    return TRUE;
}

BIT or_gate(BIT A, BIT B)
{
  if (A || B)
    return TRUE;
  else
    return FALSE;
}

BIT or_gate3(BIT A, BIT B, BIT C)
{
  return or_gate(A, or_gate(B, C));
}

BIT or_gate32(BIT* A){
    BIT Temp = A[0];
    for (int i = 1; i < 32; i++){
        and_gate(Temp,A[i]);
    }
    if (A){
        return TRUE;
    }
    else{
        return FALSE;
    }
    
}

BIT and_gate(BIT A, BIT B)
{
  if (A && B)
    return TRUE;
  else
    return FALSE;
}

BIT and_gate3(BIT A, BIT B, BIT C)
{
  return and_gate(A, and_gate(B, C));
}

BIT big_and(BIT A, BIT B, BIT C, BIT D, BIT E, BIT F)
{
  return and_gate(and_gate3(A, B, C), and_gate3(D, E, F));
}

BIT xor_gate(BIT A, BIT B)
{
  if (A ^ B)
    return TRUE;
  else
    return FALSE;
}

BIT nor_gate(BIT A, BIT B)
{
  return not_gate(or_gate(A, B));
}

BIT nand_gate(BIT A, BIT B)
{
  return not_gate(and_gate(A, B));
}

void decoder2(BIT I0, BIT I1, BIT* O0, BIT* O1, BIT* O2, BIT* O3)
{
  // Note: The input -> output mapping is slightly modified from before
  *O0 = and_gate(not_gate(I1), not_gate(I0));
  *O1 = and_gate(not_gate(I1), I0);
  *O2 = and_gate(I1, not_gate(I0));
  *O3 = and_gate(I1, I0);
  
  return;
}

BIT multiplexor2(BIT S, BIT I0, BIT I1)
{
  BIT x0 = and_gate(not_gate(S), I0);
  BIT x1 = and_gate(S, I1);
  return or_gate(x0, x1);  
}

void multiplexor2_32(BIT S, BIT* I0, BIT* I1, BIT* Output)
{
  for (int i = 0; i < 32; ++i) {
    BIT x0 = and_gate(not_gate(S), I0[i]);
    BIT x1 = and_gate(S, I1[i]);
    Output[i] = or_gate(x0, x1);
  }
}

BIT multiplexor4(BIT S0, BIT S1, BIT I0, BIT I1, BIT I2, BIT I3)
{
  BIT x0, x1, x2, x3 = FALSE;
  decoder2(S0, S1, &x0, &x1, &x2, &x3);
  
  BIT y0 = and_gate(x0, I0);
  BIT y1 = and_gate(x1, I1);
  BIT y2 = and_gate(x2, I2);
  BIT y3 = and_gate(x3, I3);
  
  BIT z0 = or_gate(y0, y1);
  BIT z1 = or_gate(y2, y3);
  
  return or_gate(z0, z1);  
}


/******************************************************************************/
/* Helper functions */
/******************************************************************************/
void copy_bits(BIT* A, BIT* B)
{
  for (int i = 0; i < 32; ++i)
    B[i] = A[i]; 
}

void print_binary(BIT* A)
{
  for (int i = 31; i >= 0; --i)
    printf("%d", A[i]); 
}

void convert_to_binary(int a, BIT* A, int length)
{
  // TODO: convert integer to 2's complement BIT representation
  // Note: A[0] is least significant bit and A[31] is most significant bit
  // For this function ONLY: you're allowed to use logical if-else statements
  convert_to_binary_char(a, A, 32);

}

void convert_to_binary_char(int a, char* A, int length)
{
  if (a >= 0) {
    for (int i = 0; i < length; ++i) {
      A[i] = (a % 2 == 1 ? '1' : '0');
      a /= 2;
    }
  } else {
    a += 1;
    for (int i = 0; i < length; ++i) {
      A[i] = (a % 2 == 0 ? '1' : '0');
      a /= 2;
    }
  }

}
  
int binary_to_integer(BIT* A)
{
  unsigned a = 0;
  unsigned mult = 1;
  
  for (int i = 0; i < 32; ++i) {
    a += A[i]*mult;
    mult *= 2;
  }
  
  return (int)a;
}


/******************************************************************************/
/* Parsing functions */
/******************************************************************************/

// TODO: Implement any helper functions to assist with parsing

void convert_to_bit_reg(char* reg, BIT* bit_return)
{
  int bit_conversion = 0;
  if(strcmp(reg, "zero") == 0)
  {
    bit_conversion = 0;
  }
  else if(strcmp(reg, "v0") == 0)
  {
    bit_conversion = 2;
  }
  else if(strcmp(reg, "a0") == 0)
  {
    bit_conversion = 4;
  }
  else if(strcmp(reg, "t0") == 0)
  {
    bit_conversion = 8;
  }
  else if(strcmp(reg, "t1") == 0)
  {
    bit_conversion = 9;
  }
  else if(strcmp(reg, "s0") == 0)
  {
    bit_conversion = 16;
  }
  else if(strcmp(reg, "s1") == 0)
  {
    bit_conversion = 17;
  }
  else if(strcmp(reg, "sp") == 0)
  {
    bit_conversion = 29;
  }
  else if(strcmp(reg, "ra") == 0)
  {
    bit_conversion = 31;
  }

  convert_to_binary(bit_conversion, bit_return, 5);

}

void convert_to_bit_opI(char* op, BIT* return_op)
{
  int bit_conversion = 0;
  if(strcmp(op, "lw") == 0)
  {
    bit_conversion = 35;
  }
  else if(strcmp(op, "sw") == 0)
  {
    bit_conversion = 43;
  }
  else if(strcmp(op, "beq") == 0)
  {
    bit_conversion = 4;
  }
  else if(strcmp(op, "addi") == 0)
  {
    bit_conversion = 8;
  }

  convert_to_binary(bit_conversion, return_op, 6);

}

void convert_to_bit_opR(char* op, BIT* return_funct)
{
  int bit_funct = 0;
  if(strcmp(op, "and") == 0)
  {
    bit_funct = 36;
  }
  else if(strcmp(op, "or") == 0)
  {
    bit_funct = 37;
  }
  else if(strcmp(op, "add") == 0)
  {
    bit_funct = 32;
  }
  else if(strcmp(op, "sub") == 0)
  {
    bit_funct = 34;
  }
  else if(strcmp(op, "slt") == 0)
  {
    bit_funct = 42;
  }
  else if(strcmp(op, "jr") == 0)
  {
    bit_funct = 8;
  }

  convert_to_binary(bit_funct, return_funct, 6);

}

void convert_to_bit_opJ(char* op, BIT* return_op)
{
  int bit_conversion = 0;
  if(strcmp(op, "j") == 0)
  {
    bit_conversion = 2;
  }
  else if(strcmp(op, "jal") == 0)
  {
    bit_conversion = 3;
  }

  convert_to_binary(bit_conversion, return_op, 6);

}

int get_instructions(BIT Instructions[][32])
{
  char line[256] = {0};
  int instruction_count = 0;
  while (fgets(line, 256, stdin) != NULL) {        
    // TODO: perform conversion of instructions to binary
    // Input: coming from stdin via: ./a.out < input.txt
    // Output: Convert instructions to binary in the instruction memory
    // Return: Total number of instructions
    // Note: you are free to use if-else and external libraries here
    // Note: you don't need to implement circuits for saving to inst. mem.
    // My approach:
    // - Use sscanf on line to get strings for instruction and registers
    // - Use instructions to determine op code, funct, and shamt fields
    // - Convert immediate field and jump address field to binary
    // - Use registers to get rt, rd, rs fields
    // Note: I parse everything as strings, then convert to BIT array at end
    char op [32];
    char reg1 [32];
    BIT reg1_b [5];
    sscanf(line, "%s %s", op, reg1);
    

    if(strcmp(op, "quit") == 0)
    {
      exit(1);
    }

    if(strcmp(op, "j") == 0 || strcmp(op, "jal") == 0 || strcmp(op, "jr") == 0)
    {
      sscanf(line, "%s %s", op, reg1);

      // R type instruction
      if(strcmp(op, "jr") == 0)
      {
        convert_to_bit_reg(reg1, reg1_b);
        BIT shamt [5] = {FALSE};          // since there are no shift functions, shamt is ALWAYS 0
        BIT opcode [6] = {FALSE};         // for all R type functions we have, opcode is ALWAYS 0
        BIT funct [6] = {FALSE};
        BIT null_reg [5] = {FALSE};
        convert_to_bit_opR(op, funct);


        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 6)
          {
            Instructions[instruction_count][i] = opcode[i];
          }
          else if( i < 11)
          {
            Instructions[instruction_count][i] = reg1_b[i-6];
          }
          else if( i < 16)
          {
            Instructions[instruction_count][i] = null_reg[i-11];
          }
          else if(i < 21)
          {
            Instructions[instruction_count][i] = null_reg[i-16];
          }
          else if(i < 26)
          {
            Instructions[instruction_count][i] = shamt[i-21];
          }
          else
          {
            Instructions[instruction_count][i] = funct[i-26];
          }
        }

      }
      else
      {
        BIT address [26]= {FALSE};
        BIT opcode [6] = {FALSE};
        convert_to_binary(atoi(reg1), address, 26);
        convert_to_bit_opJ(op, opcode);

        int i;
        for(i = 0; i < 32; i++)
        {
          if (i < 6)
          {
            Instructions[instruction_count][i] = opcode[i];
          }
          else
          {
            Instructions[instruction_count][i] = address[i-6];
          }
        }

      }
      
    }
    else
    {
      char reg2 [32];
      char reg3_or_const [32];
      sscanf(line, "%s %s %s %s", op, reg1, reg2, reg3_or_const);
      BIT reg2_b [5];
      BIT reg3_b [5];
      convert_to_bit_reg(reg1, reg1_b);
      convert_to_bit_reg(reg2, reg2_b);
      

      // finds out if reg3 is a const or not
      if(reg3_or_const[0] != 'z' && reg3_or_const[0] != 'v' && reg3_or_const[0] != 'a' && reg3_or_const[0] != 't' && reg3_or_const[0] != 's' && reg3_or_const[0] != 'r')
      {
        int numb;
        numb = atoi(reg3_or_const);
        BIT opcode [6] = {FALSE};
        BIT immediate [16] = {FALSE};
        convert_to_binary(numb, immediate, 16);
        convert_to_bit_opI(op, opcode);

        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 6)
          {
            Instructions[instruction_count][i] = opcode[i];
          }
          else if(i < 11)
          {
            Instructions[instruction_count][i] = reg2_b[i - 7];
          }
          else if(i < 16)
          {
            Instructions[instruction_count][i] =reg1_b[i - 11];
          }
          else
          {
            Instructions[instruction_count][i] = immediate[i - 16];
          }
        }

      }
      else
      {
        BIT shamt [5] = {FALSE};          // since there are no shift functions, shamt is ALWAYS 0
        BIT opcode [6] = {FALSE};         // for all R type functions we have, opcode is ALWAYS 0
        BIT funct [6] = {FALSE};
        convert_to_bit_reg(reg3_or_const, reg3_b);
        convert_to_bit_opR(op, funct);

        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 6)
          {
            Instructions[instruction_count][i] = opcode[i];
          }
          else if( i < 11)
          {
            Instructions[instruction_count][i] = reg2_b[i-6];
          }
          else if( i < 16)
          {
            Instructions[instruction_count][i] = reg3_b[i-11];
          }
          else if(i < 21)
          {
            Instructions[instruction_count][i] = reg1_b[i-16];
          }
          else if(i < 26)
          {
            Instructions[instruction_count][i] = shamt[i-21];
          }
          else
          {
            Instructions[instruction_count][i] = funct[i-26];
          }
        }

      }

    }

    instruction_count++;
  
  }
  
  return instruction_count;
}


/******************************************************************************/
/* Program state - memory spaces, PC, and control */
/******************************************************************************/
BIT PC[32]                  = {FALSE};
BIT MEM_Instruction[32][32] = {FALSE};
BIT MEM_Data[32][32]        = {FALSE};
BIT MEM_Register[32][32]    = {FALSE};

BIT RegDst    = FALSE;
BIT Jump      = FALSE;
BIT Branch    = FALSE;
BIT MemRead   = FALSE;
BIT MemToReg  = FALSE;
BIT ALUOp[2]  = {FALSE};
BIT MemWrite  = FALSE;
BIT ALUSrc    = FALSE;
BIT RegWrite  = FALSE;
BIT Zero      = FALSE;
BIT ALUControl[4] = {FALSE};

void print_instruction()
{
  unsigned pc = binary_to_integer(PC);
  printf("PC: %d\n", pc);
  printf("Instruction: ");
  print_binary(MEM_Instruction[pc]);
  printf("\n");
}

void print_state()
{
  printf("Data: ");
  for (int i = 0; i < 32; ++i) {
    printf("%d ", binary_to_integer(MEM_Data[i]));
  } 
  printf("\n");  
  
  printf("Register: ");
  for (int i = 0; i < 32; ++i) {
    printf("%d ", binary_to_integer(MEM_Register[i]));
  } 
  printf("\n");
}


/******************************************************************************/
/* Functions that you will implement */
/******************************************************************************/
void Instruction_Memory(BIT* ReadAddress, BIT* Instruction)
{    
    BIT out[32] = {FALSE};
    decoder5(ReadAddress, out); //might not need &
    for(int i=0; i<32; i++){
        multiplexor2_32(out[i],Instruction,MEM_Instruction[i],Instruction);
    }  
}

BIT Rtype(BIT andd, BIT orr, BIT add, BIT sub, BIT jr){
    return or_gate(or_gate(or_gate(andd,orr), or_gate(add,sub)), jr);
}
BIT Jtype(BIT j, BIT jal){
    return or_gate(j, jal);
}

void Control(BIT* OpCode,
  BIT* RegDst, BIT* Jump, BIT* Branch, BIT* MemRead, BIT* MemToReg,
  BIT* ALUOp, BIT* MemWrite, BIT* ALUSrc, BIT* RegWrite)
{
   *MemRead = big_and((OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0]));
  *MemWrite = big_and((OpCode[5]), not_gate(OpCode[4]), (OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0]));
  *Branch =  big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), (OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT memr = *MemRead;
  BIT memw = *MemWrite;
  BIT bq = *Branch;
  *ALUSrc = or_gate(memr, memw);
  *RegWrite = not_gate(memr, bq); 
  
  BIT andd =  big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT orr =   big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT add =  big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT sub =  big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT jr =   big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  *MemToReg = or_gate(Rtype(andd, orr, add, sub, jr), memr);
  *RegDst = Rtype(andd, orr, add, sub, jr);
  *Jump = Jtype(big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0])), big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0])));
  ALUOp[0] = bq;
  ALUOp[1] = Rtype(andd, orr, add, sub, jr);
  
}

void Read_Register(BIT* ReadRegister1, BIT* ReadRegister2,
  BIT* ReadData1, BIT* ReadData2)
{
  // TODO: Implement register read functionality
  // Input: two 5-bit register addresses
  // Output: the values of the specified registers in ReadData1 and ReadData2
  // Note: Implementation will be very similar to instruction memory circuit
  BIT RR1[32] = {FALSE};
  BIT RR2[32] = {FALSE};
  decoder5(ReadRegister1,RR1);
  decoder5(ReadRegister2,RR2);
  copy_bits(RR1,ReadData1);
  copy_bits(RR2,ReadData2);


  
}

void Write_Register(BIT RegWrite, BIT* WriteRegister, BIT* WriteData)
{
  // TODO: Implement register write functionality
  // Input: one 5-bit register address, data to write, and control bit
  // Output: None, but will modify register file
  // Note: Implementation will again be similar to those above
  BIT WR[32] = {FALSE};
  decoder5(WriteRegister,WR);
  BIT Reg31[32] = {FALSE};
  decoder5(REG_THIRTY_ONE, Reg31);
  for (int i=0; i<32; i++){
    while (and_gate(RegWrite,WR[i])){
      Reg31[i] = WriteData[i];
    }
    
  }
  
}

void ALU_Control(BIT* ALUOp, BIT* funct, BIT* ALUControl)
{
  // TODO: Implement ALU Control circuit
  // Input: 2-bit ALUOp from main control circuit, 6-bit funct field from the
  //        binary instruction
  // Output:4-bit ALUControl for input into the ALU
  // Note: Can use SOP or similar approaches to determine bits
  ALUControl[3] = 0;
  // Created gates with and/sub/add/or/sll from diagrams. 
  BIT sub = big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), not_gate(funct[2]), (funct[1]),  not_gate(funct[0]));
  BIT sll = big_and((funct[5]), not_gate(funct[4]), (funct[3]), not_gate(funct[2]), (funct[1]), not_gate(funct[0]));

  ALUControl[0] = or_gate(sll, big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), (funct[2]), not_gate(funct[1]), (funct[0])));
  ALUControl[1] = or_gate(or_gate3(big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), not_gate(funct[2]), not_gate(funct[1]), not_gate(funct[0])), sub, sll), not_gate(ALUOp[1]));
  ALUControl[2] = or_gate3(sub, sll, ALUOp[0]); 
}

void ALU(BIT* ALUControl, BIT* Input1, BIT* Input2, BIT* Zero, BIT* Result)
{   
  // TODO: Implement 32-bit ALU
  // Input: 4-bit ALUControl, two 32-bit inputs
  // Output: 32-bit result, and zero flag big
  // Note: Can re-use prior implementations (but need new circuitry for zero)
  BIT Less = FALSE;
  BIT Set = FALSE;
  ALU1(A[0], B[0], Binvert, CarryIn, Less, Op0, Op1, &Result[0], CarryOut, &Set);
  for (int i = 1; i < 32; ++i) {
    ALU1(A[i], B[i], Binvert, *CarryOut, Less, Op0, Op1, &Result[i], CarryOut, &Set);
  }
  Less = Set;
  ALU1(A[0], B[0], Binvert, CarryIn, Less, Op0, Op1, &Result[0], CarryOut, &Set);
  Zero = not_gate(or_gate32(Result));
}

void Data_Memory(BIT MemWrite, BIT MemRead, 
  BIT* Address, BIT* WriteData, BIT* ReadData)
{
  // TODO: Implement data memory
  // Input: 32-bit address, control flags for read/write, and data to write
  // Output: data read if processing a lw instruction
  // Note: Implementation similar as above
  for (int i = 0; i < 32; i++){
      BIT read = ReadData[i];
      bool temp = multiplexor2(MemWrite, MEM_Data[binary_to_integer(Address)][i], WriteData[i]);
      bool temp2 = multiplexor2(MemRead, read, MEM_Data[binary_to_integer(Address)][i]);
      MEM_Data[binary_to_integer(Address)][i] = temp;
      read = temp2;
      ReadData[i] = read;
  }
}

void Extend_Sign16(BIT* Input, BIT* Output)
{
  // TODO: Implement 16-bit to 32-bit sign extender
  // Copy Input to Output, then extend 16th Input bit to 17-32 bits in Output
  for (int i = 17; i < 32; i++){
    Output[i] = multiplexor2(Input[16], FALSE, TRUE);
  }
  for (int i = 0; i <= 16 ; i++){
    Output[i] = Input[i];
  }
}

void updateState()
{
  // TODO: Implement the full datapath here
  // Essentially, you'll be figuring out the order in which to process each of 
  // the sub-circuits comprising the entire processor circuit. It makes it 
  // easier to consider the pipelined version of the process, and handle things
  // in order of the pipeline. The stages and operations are:
  // Fetch - load instruction from instruction memory
  // Decode - set control bits and read from the register file
  // Execute - process ALU
  // Memory - read/write data memory
  // Write Back - write to the register file
  // Update PC - determine the final PC value for the next instruction
  
}


/******************************************************************************/
/* Main */
/******************************************************************************/

int main()
{
  setbuf(stdout, NULL);
    
  // parse instructions into binary format
  int counter = get_instructions(MEM_Instruction);
  
  // load program and run
  copy_bits(ZERO, PC);
  copy_bits(THIRTY_TWO, MEM_Register[29]);
  
  while (binary_to_integer(PC) < counter) {
    print_instruction();
    updateState();
    print_state();
  }

  return 0;
}
