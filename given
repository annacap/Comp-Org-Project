/* 
Class Project: The logical conclusion (v1.1)
CSCI-2500 Fall 2021
*/

/******************************************************************************/
/* Usual suspects to include  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// define BIT type as a char (i.e., one byte)
typedef char BIT;
#define TRUE 1
#define FALSE 0
#define UNDEF -1

// useful constants
BIT ONE[32] = {TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};
BIT ZERO[32] = {FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};
BIT REG_THIRTY_ONE[5] = {TRUE, TRUE, TRUE, TRUE, TRUE};
BIT THIRTY_TWO[32] = {FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, 
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE,
  FALSE};


/******************************************************************************/
/* Function prototypes */
/******************************************************************************/
BIT not_gate(BIT A);
BIT or_gate(BIT A, BIT B);
BIT or_gate3(BIT A, BIT B, BIT C);
BIT or_gate32(BIT* A);
BIT and_gate(BIT A, BIT B);
BIT and_gate3(BIT A, BIT B, BIT C);
BIT big_and(BIT A, BIT B, BIT C, BIT D, BIT E, BIT F);
BIT xor_gate(BIT A, BIT B);
BIT nor_gate(BIT A, BIT B);
BIT nand_gate(BIT A, BIT B);

void decoder2(BIT I0, BIT I1, BIT* O0, BIT* O1, BIT* O2, BIT* O3);
void decoder3(BIT* I, BIT EN, BIT* O);
void decoder5(BIT* I, BIT* O);
BIT multiplexor2(BIT S, BIT I0, BIT I1);
void multiplexor2_32(BIT S, BIT* I0, BIT* I1, BIT* Output);
BIT multiplexor4(BIT S0, BIT S1, BIT I0, BIT I1, BIT I2, BIT I3);

void copy_bits(BIT* A, BIT* B);
void print_binary(BIT* A);
void convert_to_binary(int a, BIT* A, int length);
void adder1(BIT A, BIT B, BIT CarryIn, BIT* CarryOut, BIT* Sum);
void convert_to_binary_char(int a, char* A, int length);
int binary_to_integer(BIT* A);

int get_instructions(BIT Instructions[][32]);

void Instruction_Memory(BIT* ReadAddress, BIT* Instruction);
void Control(BIT* OpCode,
  BIT* RegDst, BIT* Jump, BIT* Branch, BIT* MemRead, BIT* MemToReg,
  BIT* ALUOp, BIT* MemWrite, BIT* ALUSrc, BIT* RegWrite);
void Read_Register(BIT* ReadRegister1, BIT* ReadRegister2,
  BIT* ReadData1, BIT* ReadData2);
void Write_Register(BIT RegWrite, BIT* WriteRegister, BIT* WriteData);
void ALU_Control(BIT* ALUOp, BIT* funct, BIT* ALUControl);
void ALU(BIT* ALUControl, BIT* Input1, BIT* Input2, BIT* Zero, BIT* Result);//BIT Op1, BIT Op2, BIT Op4);
void Data_Memory(BIT MemWrite, BIT MemRead, 
  BIT* Address, BIT* WriteData, BIT* ReadData);
void Extend_Sign16(BIT* Input, BIT* Output);
void updateState();
  
/******************************************************************************/
/* Functions provided for your convenience */
/******************************************************************************/
BIT not_gate(BIT A)
{
  if (A)
    return FALSE;
  else
    return TRUE;
}

BIT or_gate(BIT A, BIT B)
{
  if (A || B)
    return TRUE;
  else
    return FALSE;
}

BIT or_gate3(BIT A, BIT B, BIT C)
{
  return or_gate(A, or_gate(B, C));
}

BIT or_gate32(BIT* A){
    BIT Temp = A[0];
    for (int i = 1; i < 32; i++){
        and_gate(Temp,A[i]);
    }
    if (A){
        return TRUE;
    }
    else{
        return FALSE;
    }
    
}

BIT and_gate(BIT A, BIT B)
{
  if (A && B)
    return TRUE;
  else
    return FALSE;
}

BIT and_gate3(BIT A, BIT B, BIT C)
{
  return and_gate(A, and_gate(B, C));
}

BIT big_and(BIT A, BIT B, BIT C, BIT D, BIT E, BIT F)
{
  return and_gate(and_gate3(A, B, C), and_gate3(D, E, F));
}

BIT xor_gate(BIT A, BIT B)
{
  if (A ^ B)
    return TRUE;
  else
    return FALSE;
}

BIT nor_gate(BIT A, BIT B)
{
  return not_gate(or_gate(A, B));
}

BIT nand_gate(BIT A, BIT B)
{
  return not_gate(and_gate(A, B));
}

void decoder2(BIT I0, BIT I1, BIT* O0, BIT* O1, BIT* O2, BIT* O3)
{
  // Note: The input -> output mapping is slightly modified from before
  *O0 = and_gate(not_gate(I1), not_gate(I0));
  *O1 = and_gate(not_gate(I1), I0);
  *O2 = and_gate(I1, not_gate(I0));
  *O3 = and_gate(I1, I0);
  
  return;
}
void decoder3(BIT* I, BIT EN, BIT* O)
{
  // TODO: implement 3-to-8 decoder using gates
  // See lecture slides, book, and/or online resources for logic designs
  
  O[0] = and_gate3(not_gate(I[2]), not_gate(I[1]), not_gate(I[0]));
  O[1] = and_gate3(not_gate(I[2]), not_gate(I[1]), I[0]);
  O[2] = and_gate3(not_gate(I[2]), I[1], not_gate(I[0]));
  O[3] = and_gate3(not_gate(I[2]), I[1], I[0]);
  O[4] = and_gate3(I[2], not_gate(I[1]), not_gate(I[0]));
  O[5] = and_gate3(I[2], not_gate(I[1]), I[0]);
  O[6] = and_gate3(I[2], I[1], not_gate(I[0]));
  O[7] = and_gate3(I[2], I[1], I[0]);
  
  O[0] = and_gate(EN, O[0]);
  O[1] = and_gate(EN, O[1]);
  O[2] = and_gate(EN, O[2]);
  O[3] = and_gate(EN, O[3]);
  O[4] = and_gate(EN, O[4]);
  O[5] = and_gate(EN, O[5]);
  O[6] = and_gate(EN, O[6]);
  O[7] = and_gate(EN, O[7]);
  
  return;
}

void decoder5(BIT* I, BIT* O)
{
  // TODO: implement 5-to-32 decoder using 2-to-4 and 3-to-8 decoders
  // https://fci.stafpu.bu.edu.eg/Computer%20Science/4887/crs-12801/Files/hw4-solution.pdf
  
   BIT EN[4] = {FALSE};
   decoder2(I[3], I[4], &EN[0], &EN[1], &EN[2], &EN[3]);
   decoder3(I, EN[3], &O[24]);
   decoder3(I, EN[2], &O[16]);
   decoder3(I, EN[1], &O[8]);
   decoder3(I, EN[0], &O[0]);
}

BIT multiplexor2(BIT S, BIT I0, BIT I1)
{
  BIT x0 = and_gate(not_gate(S), I0);
  BIT x1 = and_gate(S, I1);
  return or_gate(x0, x1);  
}

void multiplexor2_32(BIT S, BIT* I0, BIT* I1, BIT* Output)
{
  for (int i = 0; i < 32; ++i) {
    BIT x0 = and_gate(not_gate(S), I0[i]);
    BIT x1 = and_gate(S, I1[i]);
    Output[i] = or_gate(x0, x1);
  }
}

BIT multiplexor4(BIT S0, BIT S1, BIT I0, BIT I1, BIT I2, BIT I3)
{
  BIT x0, x1, x2, x3 = FALSE;
  decoder2(S0, S1, &x0, &x1, &x2, &x3);
  
  BIT y0 = and_gate(x0, I0);
  BIT y1 = and_gate(x1, I1);
  BIT y2 = and_gate(x2, I2);
  BIT y3 = and_gate(x3, I3);
  
  BIT z0 = or_gate(y0, y1);
  BIT z1 = or_gate(y2, y3);
  
  return or_gate(z0, z1);  
}

BIT multiplexor8(BIT S0, BIT S1, BIT S2, BIT I0, BIT I1, BIT I2, BIT I3, BIT I4, BIT I5, BIT I6, BIT I7)
{
  BIT temp_O [8] = {FALSE};
  BIT temp_I [3] = {S0, S1, S2};
  decoder3(temp_I, TRUE, temp_O);
  
  BIT y0 = and_gate(temp_O[0], I0);
  BIT y1 = and_gate(temp_O[1], I1);
  BIT y2 = and_gate(temp_O[2], I2);
  BIT y3 = and_gate(temp_O[3], I3);
  BIT y4 = and_gate(temp_O[4], I4);
  BIT y5 = and_gate(temp_O[5], I5);
  BIT y6 = and_gate(temp_O[6], I6);
  BIT y7 = and_gate(temp_O[7], I7);
  
  BIT z0 = or_gate(y0, y1);
  BIT z1 = or_gate(y2, y3);
  BIT z2 = or_gate(y4, y5);
  BIT z3 = or_gate(y6, y7);

  BIT x0 = or_gate(z0, z1);
  BIT x1 = or_gate(z2, z3);
  
  return or_gate(x0, x1);  
} 

/******************************************************************************/
/* Helper functions */
/******************************************************************************/
void copy_bits(BIT* A, BIT* B)
{
  for (int i = 0; i < 32; ++i)
    B[i] = A[i]; 
}

void print_binary(BIT* A)
{
  for (int i = 31; i >= 0; --i)
    printf("%d", A[i]); 
}

void convert_to_binary(int a, BIT* A, int length)
{
  // TODO: convert integer to 2's complement BIT representation
  // Note: A[0] is least significant bit and A[31] is most significant bit
  // For this function ONLY: you're allowed to use logical if-else statements
  //convert_to_binary_char(a, A, 32);

    /* Use your implementation from Lab 6 */
  int num = a;

  int i;
  int index = length - 1;
  int result;

  for(i = 0; num > 0, i < length; i++)
  {
    result = num % 2;
    if (result == 1)
    {
      A[index] = TRUE;
    }
    else
    {
      A[index] = FALSE;
    }
    num = num / 2;
    index--;
  }

}
void adder1(BIT A, BIT B, BIT CarryIn, BIT* CarryOut, BIT* Sum)
{
  // TODO: implement a 1-bit adder
  // Note: you can probably copy+paste this from your (or my) Lab 5 solution

  BIT x0 = xor_gate(A, B);
  *Sum = xor_gate(CarryIn, x0);
  
  BIT y0 = and_gate(x0, CarryIn);
  BIT y1 = and_gate(A, B);
  *CarryOut = or_gate(y0, y1);
}

void convert_to_binary_char(int a, char* A, int length)
{
  if (a >= 0) {
    for (int i = 0; i < length; ++i) {
      A[i] = (a % 2 == 1 ? '1' : '0');
      a /= 2;
    }
  } else {
    a += 1;
    for (int i = 0; i < length; ++i) {
      A[i] = (a % 2 == 0 ? '1' : '0');
      a /= 2;
    }
  }

}
  
int binary_to_integer(BIT* A)
{
  unsigned a = 0;
  unsigned mult = 1;
  
  for (int i = 0; i < 32; ++i) {
    a += A[i]*mult;
    mult *= 2;
  }
  
  return (int)a;
}

void ALU1(BIT A, BIT B, BIT Binvert, BIT CarryIn, BIT Less,
  BIT Op0, BIT Op1, BIT* Result, BIT* CarryOut, BIT* Set)
{
  // TODO: implement a 1-bit ALU
  // Note: this will need modifications from Lab 5 to account for 'slt'
  // See slide "MSB ALU" in csci2500-f21-ch03a-slidses.pdf

 
  BIT x0 = multiplexor2(Binvert, B, not_gate(B));
 
  BIT y0 = and_gate(A, x0);
  BIT y1 = or_gate(A, x0);
 
  BIT y2 = FALSE;
  adder1(A, x0, CarryIn, CarryOut, &y2);
  *Set = y2;
 
  *Result = multiplexor4(Op0, Op1, y0, y1, y2, Less);
}



/******************************************************************************/
/* Parsing functions */
/******************************************************************************/

// TODO: Implement any helper functions to assist with parsing

void convert_to_bit_reg(char* reg, BIT* bit_return)
{
  int bit_conversion = 0;
  if(strcmp(reg, "zero") == 0)
  {
    bit_conversion = 0;
  }
  else if(strcmp(reg, "v0") == 0)
  {
    bit_conversion = 2;
  }
  else if(strcmp(reg, "a0") == 0)
  {
    bit_conversion = 4;
  }
  else if(strcmp(reg, "t0") == 0)
  {
    bit_conversion = 8;
  }
  else if(strcmp(reg, "t1") == 0)
  {
    bit_conversion = 9;
  }
  else if(strcmp(reg, "s0") == 0)
  {
    bit_conversion = 16;
  }
  else if(strcmp(reg, "s1") == 0)
  {
    bit_conversion = 17;
  }
  else if(strcmp(reg, "sp") == 0)
  {
    bit_conversion = 29;
  }
  else if(strcmp(reg, "ra") == 0)
  {
    bit_conversion = 31;
  }

  convert_to_binary(bit_conversion, bit_return, 5);

}

void convert_to_bit_opI(char* op, BIT* return_op)
{
  int bit_conversion = 0;
  if(strcmp(op, "lw") == 0)
  {
    bit_conversion = 35;
  }
  else if(strcmp(op, "sw") == 0)
  {
    bit_conversion = 43;
  }
  else if(strcmp(op, "beq") == 0)
  {
    bit_conversion = 4;
  }
  else if(strcmp(op, "addi") == 0)
  {
    bit_conversion = 8;
  }

  convert_to_binary(bit_conversion, return_op, 6);

}

void convert_to_bit_opR(char* op, BIT* return_funct)
{
  int bit_funct = 0;
  if(strcmp(op, "and") == 0)
  {
    bit_funct = 36;
  }
  else if(strcmp(op, "or") == 0)
  {
    bit_funct = 37;
  }
  else if(strcmp(op, "add") == 0)
  {
    bit_funct = 32;
  }
  else if(strcmp(op, "sub") == 0)
  {
    bit_funct = 34;
  }
  else if(strcmp(op, "slt") == 0)
  {
    bit_funct = 42;
  }
  else if(strcmp(op, "jr") == 0)
  {
    bit_funct = 8;
  }

  convert_to_binary(bit_funct, return_funct, 6);

}

void convert_to_bit_opJ(char* op, BIT* return_op)
{
  int bit_conversion = 0;
  if(strcmp(op, "j") == 0)
  {
    bit_conversion = 2;
  }
  else if(strcmp(op, "jal") == 0)
  {
    bit_conversion = 3;
  }

  convert_to_binary(bit_conversion, return_op, 6);

}

int get_instructions(BIT Instructions[][32])
{
  char line[256] = {0};
  int instruction_count = 0;
  while (fgets(line, 256, stdin) != NULL) {        
    // TODO: perform conversion of instructions to binary
    // Input: coming from stdin via: ./a.out < input.txt
    // Output: Convert instructions to binary in the instruction memory
    // Return: Total number of instructions
    // Note: you are free to use if-else and external libraries here
    // Note: you don't need to implement circuits for saving to inst. mem.
    // My approach:
    // - Use sscanf on line to get strings for instruction and registers
    // - Use instructions to determine op code, funct, and shamt fields
    // - Convert immediate field and jump address field to binary
    // - Use registers to get rt, rd, rs fields
    // Note: I parse everything as strings, then convert to BIT array at end
    char op [32];
    char reg1 [32];
    BIT reg1_b [5];
    sscanf(line, "%s %s", op, reg1);
    

    if(strcmp(op, "quit") == 0)
    {
      break;
    }

    if(strcmp(op, "j") == 0 || strcmp(op, "jal") == 0 || strcmp(op, "jr") == 0)
    {
      sscanf(line, "%s %s", op, reg1);

      // R type instruction
      if(strcmp(op, "jr") == 0)
      {
        convert_to_bit_reg(reg1, reg1_b);
        BIT shamt [5] = {FALSE};          // since there are no shift functions, shamt is ALWAYS 0
        BIT opcode [6] = {FALSE};         // for all R type functions we have, opcode is ALWAYS 0
        BIT funct [6] = {FALSE};
        BIT null_reg [5] = {FALSE};
        convert_to_bit_opR(op, funct);

        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 6)
          {
            Instructions[instruction_count][i] = funct[5-i];
          }
          else if( i < 11)
          {
            Instructions[instruction_count][i] = shamt[5+(5-i)];
          }
          else if( i < 16)
          {
            Instructions[instruction_count][i] = reg1_b[4+(11-i)];
          }
          else if(i < 21)
          {
            Instructions[instruction_count][i] = null_reg[4+(16-i)];
          }
          else if(i < 26)
          {
            Instructions[instruction_count][i] = null_reg[4+(21-i)];
          }
          else
          {
            Instructions[instruction_count][i] = opcode[5+(26-i)];
          }
        }


      }
      else
      {
        BIT address [26]= {FALSE};
        BIT opcode [6] = {FALSE};
        convert_to_binary(atoi(reg1), address, 26);
        convert_to_bit_opJ(op, opcode);

        int i;
        for(i = 0; i < 32; i++)
        {
          if (i < 26)
          {
            Instructions[instruction_count][i] = address[25-i];
          }
          else
          {
            Instructions[instruction_count][i] = opcode[5+(26-i)];
          }
        }

      }
      
    }
    else
    {
      char reg2 [32];
      char reg3_or_const [32];
      sscanf(line, "%s %s %s %s", op, reg1, reg2, reg3_or_const);
      BIT reg2_b [5];
      BIT reg3_b [5];
      convert_to_bit_reg(reg1, reg1_b);
      convert_to_bit_reg(reg2, reg2_b);
      

      // finds out if reg3 is a const or not
      if(reg3_or_const[0] != 'z' && reg3_or_const[0] != 'v' && reg3_or_const[0] != 'a' && reg3_or_const[0] != 't' && reg3_or_const[0] != 's' && reg3_or_const[0] != 'r')
      {
        int numb;
        numb = atoi(reg3_or_const);
        BIT opcode [6] = {FALSE};
        BIT immediate [16] = {FALSE};
        convert_to_binary(numb, immediate, 16);
        convert_to_bit_opI(op, opcode);

        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 16)
          {
            Instructions[instruction_count][i] = immediate[15-i];
          }
          else if(i < 21)
          {
            Instructions[instruction_count][i] = reg1_b[4+(16-i)];
          }
          else if(i < 26)
          {
            Instructions[instruction_count][i] =reg2_b[4+(21-i)];
          }
          else
          {
            Instructions[instruction_count][i] = opcode[5+(26-i)];
          }
        }





      }
      else
      {
        BIT shamt [5] = {FALSE};          // since there are no shift functions, shamt is ALWAYS 0
        BIT opcode [6] = {FALSE};         // for all R type functions we have, opcode is ALWAYS 0
        BIT funct [6] = {FALSE};
        convert_to_bit_reg(reg3_or_const, reg3_b);
        convert_to_bit_opR(op, funct);

        int i;
        for(i = 0; i < 32; i++)
        {
          if(i < 6)
          {
            Instructions[instruction_count][i] = funct[5-i];
          }
          else if( i < 11)
          {
            Instructions[instruction_count][i] = shamt[5+(5-i)];
          }
          else if( i < 16)
          {
            Instructions[instruction_count][i] = reg1_b[4+(11-i)];
          }
          else if(i < 21)
          {
            Instructions[instruction_count][i] = reg3_b[4+(16-i)];
          }
          else if(i < 26)
          {
            Instructions[instruction_count][i] = reg2_b[4+(21-i)];
          }
          else
          {
            Instructions[instruction_count][i] = opcode[5+(26-i)];
          }
        }

      }

    }

    instruction_count++;
  
  }
  
  return instruction_count;
}


/******************************************************************************/
/* Program state - memory spaces, PC, and control */
/******************************************************************************/
BIT PC[32]                  = {FALSE};
BIT MEM_Instruction[32][32] = {FALSE};
BIT MEM_Data[32][32]        = {FALSE};
BIT MEM_Register[32][32]    = {FALSE};

BIT RegDst    = FALSE;
BIT Jump      = FALSE;
BIT Branch    = FALSE;
BIT MemRead   = FALSE;
BIT MemToReg  = FALSE;
BIT ALUOp[2]  = {FALSE};
BIT MemWrite  = FALSE;
BIT ALUSrc    = FALSE;
BIT RegWrite  = FALSE;
BIT Zero      = FALSE;
BIT ALUControl[4] = {FALSE};

void print_instruction()
{
  unsigned pc = binary_to_integer(PC);
  printf("PC: %d\n", pc);
  printf("Instruction: ");
  print_binary(MEM_Instruction[pc]);
  printf("\n");
}

void print_state()
{
  printf("Data: ");
  for (int i = 0; i < 32; ++i) {
    printf("%d ", binary_to_integer(MEM_Data[i]));
  } 
  printf("\n");  
  
  printf("Register: ");
  for (int i = 0; i < 32; ++i) {
    printf("%d ", binary_to_integer(MEM_Register[i]));
  } 
  printf("\n");
}


/******************************************************************************/
/* Functions that you will implement */
/******************************************************************************/
void Instruction_Memory(BIT* ReadAddress, BIT* Instruction)
{    
    BIT out[32] = {FALSE};
    decoder5(ReadAddress, out); //might not need &
    for(int i=0; i<32; i++){
        multiplexor2_32(out[i],Instruction,MEM_Instruction[i],Instruction);
    }  
}

void Control(BIT* OpCode,
  BIT* RegDst, BIT* Jump, BIT* Branch, BIT* MemRead, BIT* MemToReg,
  BIT* ALUOp, BIT* MemWrite, BIT* ALUSrc, BIT* RegWrite, BIT* Jal)
{
  *MemRead = big_and((OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0]));
  *MemWrite = big_and((OpCode[5]), not_gate(OpCode[4]), (OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0]));
  *Branch =  big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), (OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  BIT addi = big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), (OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));
  *RegDst = big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), not_gate(OpCode[1]), not_gate(OpCode[0]));

  *Jal = big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), (OpCode[0]));

  BIT memr = *MemRead;
  BIT memw = *MemWrite;
  BIT bq = *Branch;
  *ALUSrc = or_gate(or_gate(memr, memw), addi);
  *RegWrite = or_gate(or_gate(memr, *RegDst), addi);
  *MemToReg = memr;

  *Jump = big_and(not_gate(OpCode[5]), not_gate(OpCode[4]), not_gate(OpCode[3]), not_gate(OpCode[2]), (OpCode[1]), not_gate(OpCode[0]));
  ALUOp[0] = or_gate(bq, *Jump);
  ALUOp[1] = or_gate(*RegDst, *Jump);
  
}

void Read_Register(BIT* ReadRegister1, BIT* ReadRegister2,
  BIT* ReadData1, BIT* ReadData2)
{
  // TODO: Implement register read functionality
  // Input: two 5-bit register addresses
  // Output: the values of the specified registers in ReadData1 and ReadData2
  // Note: Implementation will be very similar to instruction memory circuit

  BIT RR1[32] = {FALSE};
  BIT RR2[32] = {FALSE};
  decoder5(ReadRegister1, RR1);
  decoder5(ReadRegister2, RR2);
  int i = 0;
  while(i < 32)
  {
     multiplexor2_32(RR1[i], ReadData1, MEM_Register[i], ReadData1);
     i++;
  }
  int j = 0;
  while(j < 32)
  {
     multiplexor2_32(RR2[j], ReadData2, MEM_Register[j], ReadData2);
     j++;
  }

}

void Write_Register(BIT RegWrite, BIT* WriteRegister, BIT* WriteData)
{
  // TODO: Implement register write functionality
  // Input: one 5-bit register address, data to write, and control bit
  // Output: None, but will modify register file
  // Note: Implementation will again be similar to those above

  BIT temp[32] = {FALSE};
  decoder5(WriteRegister,temp);
  int i = 0;
  while ( i < 32 ) 
  { 
    multiplexor2_32(and_gate(RegWrite,temp[i]), MEM_Register[i], WriteData, MEM_Register[i]);
    i++;
  }

}


void ALU_Control(BIT* ALUOp, BIT* funct, BIT* ALUControl)
{ // TODO: Implement ALU Control circuit
  // Input: 2-bit ALUOp from main control circuit, 6-bit funct field from the binary instruction
  // Output:4-bit ALUControl for input into the ALU
  // Note: Can use SOP or similar approaches t o determine bits
  // Created gates with and/sub/add/or/sll from diagrams.
  BIT sub = big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), not_gate(funct[2]), (funct[1]),  not_gate(funct[0]));
  BIT slt = big_and((funct[5]), not_gate(funct[4]), (funct[3]), not_gate(funct[2]), (funct[1]), not_gate(funct[0]));
  BIT add = big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), not_gate(funct[2]), not_gate(funct[1]), not_gate(funct[0]));
 //BIT and = and_gate6((funct[5]), not_gate(funct[4]), not_gate(funct[3]), (funct[2]), not_gate(funct[1]), not_gate(funct[0]));
  BIT orr =  big_and((funct[5]), not_gate(funct[4]), not_gate(funct[3]), (funct[2]), not_gate(funct[1]), (funct[0]));
 
  ALUControl[3] = or_gate(or_gate(ALUOp[0],sub), slt); //Carry in
  ALUControl[2] = or_gate(or_gate(sub, slt), ALUOp[0]); //Binvert
  ALUControl[1] = or_gate(or_gate(or_gate(add, sub), slt), not_gate(ALUOp[1])); //Op1
  ALUControl[0] = or_gate(slt, orr); //Op0
  
  
  
}


void ALU(BIT* ALUControl, BIT* Input1, BIT* Input2, BIT* Zero, BIT* Result)
{
  // TODO: implement a 32-bit ALU
  // You'll need to essentially implement a 32-bit ripple adder here
  // See slide "New 32-bit ALU" in csci2500-f21-ch03a-slides.pdf
  int i;
  BIT Set = FALSE;
  BIT carryout = FALSE;
  BIT binvert = ALUControl[2]; //for subtract
  printf("BINVERT: %d\n", binvert);
  BIT CarryINN = ALUControl[3];
  for(i = 0; i < 32; i++)
  {

    ALU1(Input1[i], Input2[i], binvert, CarryINN, Set, ALUControl[0], ALUControl[1], &Result[i], &carryout, &Set);

    CarryINN = carryout;
  }

  *Zero = carryout;

  ALU1(Input1[0], Input2[0], binvert, binvert, Set, ALUControl[0], ALUControl[1],  &Result[0], &carryout, &Set);
  
  return;
  
}


void Data_Memory(BIT MemWrite, BIT MemRead, 
  BIT* Address, BIT* WriteData, BIT* ReadData)
{

  // TODO: Implement data memory
  // Input: 32-bit address, control flags for read/write, and data to write
  // Output: data read if processing a lw instruction
  // Note: Implementation similar as above
  BIT ready [32] = {FALSE};
  decoder5(Address, ready);
  for (int i = 0; i < 32; i++){
    BIT and_write = and_gate(ready[i], MemWrite);
    BIT and_read = and_gate(ready[i], MemRead);
    multiplexor2_32(and_write, MEM_Data[i], WriteData, MEM_Data[i]);
    multiplexor2_32(and_read, ReadData, MEM_Data[i], ReadData);

  }
}

void Extend_Sign16(BIT* Input, BIT* Output)
{
  // TODO: Implement 16-bit to 32-bit sign extender
  // Copy Input to Output, then extend 16th Input bit to 17-32 bits in Output
  int i;
  for (i = 0; i < 16; i++)
  {
    Output[i] = Input[i];
  }
  for (i = 16; i < 32 ; i++)
  {
    Output[i] = multiplexor2(Input[15], FALSE, TRUE);
  }
}

void updateState()
{
  // TODO: Implement the full datapath here
  // Essentially, you'll be figuring out the order in which to process each of 
  // the sub-circuits comprising the entire processor circuit. It makes it 
  // easier to consider the pipelined version of the process, and handle things
  // in order of the pipeline. The stages and operations are:
  // Fetch - load instruction from instruction memory
  BIT current_instruct[32] ={FALSE};
  Instruction_Memory(PC, current_instruct);
  // Decode - set control bits and read from the register file
  //Making OPCODE
  BIT opcode[6] = {FALSE}; //set them to 0
  int i = 0;
  int pos = 26;
  while (i < 6){
      opcode[i] = current_instruct[pos];
      pos++;
      i++;
  }

  BIT jump_to_reg = {FALSE};

  Control(opcode, &RegDst, &Jump, &Branch, &MemRead, &MemToReg, ALUOp, &MemWrite, &ALUSrc, &RegWrite, jump_and_link); //control of the datapath

  //Set read register 1
  BIT rs[5] = {FALSE};
  i = 0; 
  pos = 21;
  while (i < 5){
      rs[i] = current_instruct[pos];
      i++;
      pos++;
  }
 
  BIT rt[5] = {FALSE};
  i = 0; 
  pos = 16;
  while (i < 5){
      rt[i] = current_instruct[pos];
      i++;
      pos++;
  }
 
  BIT rd[5] = {FALSE};
  i = 0;
  pos = 11;
  while (i < 5){
      rd[i] = current_instruct[pos];
      i++;
      pos++;
  }

  BIT WR[5] = {FALSE};
  i = 0;
  while ( i < 5){
      WR[i] = multiplexor2(RegDst, rt[i], rd[i]);
      i++;
  }

  BIT funct[6] = {FALSE};
  i = 0;
  while(i < 6){
      funct[i] = current_instruct[i];
      i++;
      pos++;
  }

  BIT jump_to_reg = big_and(not_gate(funct[5]), not_gate(funct[4]), not_gate(funct[3]), (funct[2]), not_gate(funct[1]), not_gate(funct[0]));

  BIT imm [16] = {FALSE};
  i = 0;
  while(i < 16){
      imm[i] = current_instruct[i];
      i++;
  }

  BIT address_bit [26] = {FALSE};
  i = 0;
  while(i < 26){
      address_bit[i] = current_instruct[i];
      i++;
      pos++;
  }

  
  BIT extend_sign32[32] = {FALSE};
  Extend_Sign16(imm, extend_sign32);
  //Read data 1 and read data 2
  BIT RD1[32] = {FALSE};
  BIT RD2[32] = {FALSE};
  Read_Register(rs,rt,RD1,RD2);


  // Execute - process ALU
  BIT New_RD[32] = {FALSE};
  multiplexor2_32(ALUSrc, RD2, extend_sign32, New_RD);
  ALU_Control(ALUOp, funct, ALUControl);

  BIT WA[32] = {FALSE}; //write address
  ALU(ALUControl, RD1, New_RD, &Zero, WA);

  // Memory - read/write data memory
  BIT Data_RD[32] = {FALSE};
  
  Data_Memory(MemWrite, MemRead, WA, RD2, Data_RD);
  
  // Write Back - write to the register file
  BIT New_WD[32] = {FALSE};
  multiplexor2_32(MemToReg, WA, Data_RD, New_WD);
  Write_Register(and_gate(RegWrite, not_gate(jump_to_reg)), WR, New_WD);

  // Update PC - determine the final PC value for the next instruction

  

  BIT pc_adder [4] = {FALSE, TRUE, FALSE, FALSE};  //add function call

  BIT pc_copy [32] = {FALSE};

  ALU(pc_adder, PC, ONE, ZERO, pc_copy);

  
  
  
}


/******************************************************************************/
/* Main */
/******************************************************************************/

int main()
{
  setbuf(stdout, NULL);
    
  // parse instructions into binary format
  int counter = get_instructions(MEM_Instruction);
  
  // load program and run
  copy_bits(ZERO, PC);
  copy_bits(THIRTY_TWO, MEM_Register[29]);

  while (binary_to_integer(PC) < counter) {
    print_instruction();
    updateState();
    print_state();
  }

  return 0;
}
